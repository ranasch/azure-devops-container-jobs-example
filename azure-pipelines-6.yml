resources:
  containers:
  - container: redis5
    image: redis:5
  - container: redis4
    image: redis:4

jobs:
- job: BuildAndTest
  displayName: Build and Test

  pool:
    vmImage: 'ubuntu-18.04'

  container:
    image: rainernacr.azurecr.io/my-project-pipeline-environment:latest
    endpoint: 'MyACR'

  services:
    redis5: redis5
    redis4: redis4

  variables:
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

  steps:
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: '**/*.csproj'
      arguments: '--configuration release'

  - task: DotNetCoreCLI@2
    displayName: Test with Redis v5
    inputs:
      command: test
      projects: '**/*Tests.csproj'
      arguments: '--configuration release'
      testRunTitle: MyProject - Redis v5 - $(Agent.JobName)
    env:
      CONNECTIONSTRINGS_REDIS: redis5:6379
    continueOnError: true

  - task: DotNetCoreCLI@2
    displayName: Test with Redis v4
    inputs:
      command: test
      projects: '**/*Tests.csproj'
      arguments: '--configuration release'
      testRunTitle: MyProject - Redis v4 - $(Agent.JobName)
    env:
      CONNECTIONSTRINGS_REDIS: redis4:6379
    continueOnError: true

  - task: DotNetCoreCLI@2
    displayName: Publish
    inputs:
      command: publish
      projects: 'MyProject/MyProject.csproj'
      publishWebProjects: false
      zipAfterPublish: false
      arguments: '--configuration release'

  - task: PublishPipelineArtifact@0
    displayName: Store artefact
    inputs:
      artifactName: 'MyProject'
      targetPath: 'MyProject/bin/release/netcoreapp3.1/publish/'
    condition: eq(variables['Agent.JobStatus'], 'Succeeded')
 
- job: Package
  dependsOn: BuildAndTest
  condition: succeeded()

  pool:
    vmImage: 'ubuntu-16.04'

  steps:
  - checkout: none

  - task: DownloadPipelineArtifact@1
    inputs:
      artifactName: 'MyProject'
      targetPath: '$(System.DefaultWorkingDirectory)'

  - task: Docker@2
    displayName: Docker build and Push
    inputs:
      command: buildAndPush
      containerRegistry: 'MyACR'
      repository: myproject
      tags: $(Build.BuildNumber)

  - task: AzureCLI@2
  inputs:
    azureSubscription: 'Microsoft Azure Internal Consumption (86a210e0-3877-4587-8ac4-9b5fa848fb0e)'
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    inlineScript: 'az container create –resource-group zfaci-rg –name aci-myproject-app –image zfdemoregistry.azurecr.io/myproject:latest –cpu 1 –memory 1 –registry-login-server zfdemoregistry.azurecr.io –registry-username zfdemoregistry –registry-password $(acrPassword) –dns-name-label aci-myproject-app –ports 8080'
